// <auto-generated />
using System;
using KouArge.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KouArge.Repository.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20221023073852_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppUserGeneralAssemblyApply", b =>
                {
                    b.Property<int>("GeneralAssemblyApplysId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GeneralAssemblyApplysId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppUserGeneralAssemblyApply");
                });

            modelBuilder.Entity("GeneralAssemblyTeamMember", b =>
                {
                    b.Property<int>("GeneralAssembliesId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMembersId")
                        .HasColumnType("int");

                    b.HasKey("GeneralAssembliesId", "TeamMembersId");

                    b.HasIndex("TeamMembersId");

                    b.ToTable("GeneralAssemblyTeamMember");
                });

            modelBuilder.Entity("KouArge.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("NotificationId");

                    b.HasIndex("StudentNo")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b48bae85-e5c8-4c60-a2f1-513fd8c34a81",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(114),
                            DepartmentId = "1",
                            Email = "test@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "test",
                            NotificationId = 1,
                            PasswordHash = "asd",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c169e54f-9713-421b-9dc4-91d27d9fa6f5",
                            Status = 1,
                            StudentNo = "1",
                            Surname = "test",
                            TwoFactorEnabled = false,
                            UserName = "1",
                            Year = 2
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(303),
                            FacultyId = 1,
                            Name = "Bil Sis. Müh."
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormatId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OurFormatId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<string>("Speaker")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OurFormatId")
                        .IsUnique();

                    b.HasIndex("SemesterId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventPictures");
                });

            modelBuilder.Entity("KouArge.Core.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(403),
                            Name = "Ali Rıza Veziroğlu Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 2,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(405),
                            Name = "Asım Kocabıyık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 3,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(406),
                            Name = "Değirmendere Ali ÖZBAY Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 4,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(407),
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 5,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(408),
                            Name = "Denizcilik Fakültesi"
                        },
                        new
                        {
                            Id = 6,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(409),
                            Name = "Diş Hekimliği Fakültesi"
                        },
                        new
                        {
                            Id = 7,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(410),
                            Name = "Diş Hekimliği Fakültesi"
                        },
                        new
                        {
                            Id = 8,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(411),
                            Name = "Eğitim Fakültesi"
                        },
                        new
                        {
                            Id = 9,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(412),
                            Name = "Fen - Edebiyat Fakültesi"
                        },
                        new
                        {
                            Id = 10,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(413),
                            Name = "Ford Otosan İhsaniye Otomotiv Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 11,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(414),
                            Name = "Gazanfer Bilge Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 12,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(415),
                            Name = "Gıda ve Tarım Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 13,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(416),
                            Name = "Gölcük Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 14,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(416),
                            Name = "Güzel Sanatlar Fakültesi"
                        },
                        new
                        {
                            Id = 15,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(418),
                            Name = "Havacılık ve Uzay Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 16,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(418),
                            Name = "Hereke Asım Kocabıyık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 17,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(419),
                            Name = "Hereke Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 18,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(420),
                            Name = "Hereke Ömer İsmet Uzunyol Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 19,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(421),
                            Name = "Hukuk Fakültesi"
                        },
                        new
                        {
                            Id = 20,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(422),
                            Name = "İktisadi ve İdari Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 21,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(473),
                            Name = "İlahiyat Fakültesi"
                        },
                        new
                        {
                            Id = 22,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(474),
                            Name = "İletişim Fakültesi"
                        },
                        new
                        {
                            Id = 23,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(475),
                            Name = "İzmit Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 24,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(476),
                            Name = "Kandıra Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 25,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(477),
                            Name = "Karamürsel Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 26,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(478),
                            Name = "Kartepe Atçılık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 27,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(479),
                            Name = "Kartepe Turizm Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 28,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(480),
                            Name = "Kocaeli Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 29,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(481),
                            Name = "Kocaeli Sağlık Hizmetleri Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 30,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(482),
                            Name = "Koseköy Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 31,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(483),
                            Name = "Mimarlık ve Tasarım Fakültesi"
                        },
                        new
                        {
                            Id = 32,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(483),
                            Name = "Mühendislik Fakültesi"
                        },
                        new
                        {
                            Id = 33,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(484),
                            Name = "Sağlık Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 34,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(485),
                            Name = "Spor Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 35,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(486),
                            Name = "Teknoloji Fakültesi"
                        },
                        new
                        {
                            Id = 36,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(487),
                            Name = "Tıp Fakültesi"
                        },
                        new
                        {
                            Id = 37,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(488),
                            Name = "Turizm Fakültesi"
                        },
                        new
                        {
                            Id = 38,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(489),
                            Name = "Turizm İşletmecliliği ve Otelcilik Yüksekokulu"
                        },
                        new
                        {
                            Id = 39,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(490),
                            Name = "Uzunçiftlik Nuh Çimento Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 40,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(491),
                            Name = "Yahya Kaptan Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 41,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(492),
                            Name = "Ziraat Fakültesi"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssembly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PıctureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GeneralAssemblies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(689),
                            EndDate = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(690),
                            PıctureUrl = "pictureUrl",
                            StartDate = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(690),
                            Status = 0,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplyTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventParticipantId")
                        .HasColumnType("int");

                    b.Property<string>("Introducing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SituationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Staus")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Why")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventParticipantId");

                    b.ToTable("GeneralAssemblyApplies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplyTime = "ApplyTime",
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(600),
                            Introducing = "Introducing",
                            SituationDescription = "SituationDescription",
                            Staus = 200,
                            TeamId = 1,
                            UserId = "1",
                            Why = "why"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralAssemblyId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralAssemblyId");

                    b.HasIndex("TeamId");

                    b.ToTable("GeneralAssemblyTeams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(782),
                            GeneralAssemblyId = 1,
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Email")
                        .HasColumnType("int");

                    b.Property<int>("Sms")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(881),
                            Email = 1,
                            Sms = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(882),
                            Email = 1,
                            Sms = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(883),
                            Email = 0,
                            Sms = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(884),
                            Email = 0,
                            Sms = 0
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.OurFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OurFormats");
                });

            modelBuilder.Entity("KouArge.Core.Models.Redirect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Redirects");
                });

            modelBuilder.Entity("KouArge.Core.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("generalAssemblyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("generalAssemblyId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialMediaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("SocaialMediaTypes");
                });

            modelBuilder.Entity("KouArge.Core.Models.SponsorsAndPartners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SponsorsAndPartners");
                });

            modelBuilder.Entity("KouArge.Core.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneralAssemblyApplyId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneralAssemblyId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralAssemblyApplyId");

                    b.HasIndex("GeneralAssemblyId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(1206),
                            Description = "Webino Takımı",
                            LogoUrl = "logoUrl",
                            Name = "Webino"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralAssemblyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(985),
                            EndDate = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(987),
                            GeneralAssemblyId = 1,
                            StartDate = new DateTime(2022, 10, 23, 10, 38, 52, 587, DateTimeKind.Local).AddTicks(986),
                            TeamId = 1,
                            Title = "titleTeamMember"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamTeamMember", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int>("teamMembersId")
                        .HasColumnType("int");

                    b.HasKey("TeamsId", "teamMembersId");

                    b.HasIndex("teamMembersId");

                    b.ToTable("TeamTeamMember");
                });

            modelBuilder.Entity("AppUserGeneralAssemblyApply", b =>
                {
                    b.HasOne("KouArge.Core.Models.GeneralAssemblyApply", null)
                        .WithMany()
                        .HasForeignKey("GeneralAssemblyApplysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralAssemblyTeamMember", b =>
                {
                    b.HasOne("KouArge.Core.Models.GeneralAssembly", null)
                        .WithMany()
                        .HasForeignKey("GeneralAssembliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.TeamMember", null)
                        .WithMany()
                        .HasForeignKey("TeamMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.HasOne("KouArge.Core.Models.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Notification", "Notification")
                        .WithMany("AppUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.HasOne("KouArge.Core.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.HasOne("KouArge.Core.Models.OurFormat", "OurFormat")
                        .WithOne("Event")
                        .HasForeignKey("KouArge.Core.Models.Event", "OurFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Semester", "Semester")
                        .WithMany("Events")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OurFormat");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventParticipant", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany("EventParticipantLists")
                        .HasForeignKey("AppUserId");

                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventPicture", b =>
                {
                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("EventPictures")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssembly", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", "User")
                        .WithOne("GeneralAssembly")
                        .HasForeignKey("KouArge.Core.Models.GeneralAssembly", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.HasOne("KouArge.Core.Models.EventParticipant", null)
                        .WithMany("GeneralAssemblyApplies")
                        .HasForeignKey("EventParticipantId");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyTeam", b =>
                {
                    b.HasOne("KouArge.Core.Models.GeneralAssembly", "GeneralAssembly")
                        .WithMany()
                        .HasForeignKey("GeneralAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralAssembly");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMedia", b =>
                {
                    b.HasOne("KouArge.Core.Models.GeneralAssembly", "GeneralAssembly")
                        .WithMany("SocialMedias")
                        .HasForeignKey("generalAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralAssembly");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMediaType", b =>
                {
                    b.HasOne("KouArge.Core.Models.SocialMedia", "SocialMedia")
                        .WithMany("SocaialMediaType")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("KouArge.Core.Models.Team", b =>
                {
                    b.HasOne("KouArge.Core.Models.GeneralAssemblyApply", null)
                        .WithMany("Team")
                        .HasForeignKey("GeneralAssemblyApplyId");

                    b.HasOne("KouArge.Core.Models.GeneralAssembly", null)
                        .WithMany("Teams")
                        .HasForeignKey("GeneralAssemblyId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamTeamMember", b =>
                {
                    b.HasOne("KouArge.Core.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.TeamMember", null)
                        .WithMany()
                        .HasForeignKey("teamMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.Navigation("EventParticipantLists");

                    b.Navigation("GeneralAssembly")
                        .IsRequired();
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("EventPictures");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventParticipant", b =>
                {
                    b.Navigation("GeneralAssemblyApplies");
                });

            modelBuilder.Entity("KouArge.Core.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssembly", b =>
                {
                    b.Navigation("SocialMedias");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("KouArge.Core.Models.Notification", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("KouArge.Core.Models.OurFormat", b =>
                {
                    b.Navigation("Event")
                        .IsRequired();
                });

            modelBuilder.Entity("KouArge.Core.Models.Semester", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMedia", b =>
                {
                    b.Navigation("SocaialMediaType");
                });
#pragma warning restore 612, 618
        }
    }
}

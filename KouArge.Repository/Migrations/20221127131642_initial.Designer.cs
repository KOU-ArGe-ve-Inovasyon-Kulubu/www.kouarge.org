// <auto-generated />
using System;
using KouArge.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KouArge.Repository.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20221127131642_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KouArge.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("StudentNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b03b8cd7-9f5d-4a09-8c87-88c09d074ea0",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 299, DateTimeKind.Local).AddTicks(8429),
                            DepartmentId = "1",
                            Email = "test@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "test",
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "1",
                            NotificationId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEGPJRk1vOxjaYUkOxAuU5gvYRB5l/OUutAlJBkhUDltYcL9MjIiOmznus+SinfMsuA==",
                            PhoneNumber = "5303003030",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87de1be7-c7c2-4c31-ab33-50bc3381233d",
                            StudentNumber = "191307000",
                            Surname = "test",
                            TwoFactorEnabled = false,
                            UserName = "1",
                            Year = 2
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d86f5bb-ff8c-4d5d-8ec2-e6406968150d",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 300, DateTimeKind.Local).AddTicks(9521),
                            DepartmentId = "1",
                            Email = "test2@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "test2",
                            NormalizedEmail = "TEST2@GMAIL.COM",
                            NormalizedUserName = "2",
                            NotificationId = 1,
                            PhoneNumber = "5303003031",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4a78588-2a4d-4d75-b5e5-efa692bc5c03",
                            StudentNumber = "191307001",
                            Surname = "test2",
                            TwoFactorEnabled = false,
                            UserName = "2",
                            Year = 2
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Template")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AppUserId = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(450),
                            EventId = 1,
                            IsActive = true,
                            Template = 1
                        },
                        new
                        {
                            Id = "2",
                            AppUserId = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(451),
                            EventId = 2,
                            IsActive = true,
                            Template = 1
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(543),
                            FacultyId = 1,
                            IsActive = true,
                            Name = "Bil Sis. Müh."
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgBackUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OurFormatId")
                        .HasColumnType("int");

                    b.Property<int>("ReadCount")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OurFormatId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(895),
                            Description = "Descript1",
                            EventDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(893),
                            ImgBackUrl = "Url1",
                            IsActive = true,
                            OurFormatId = 2,
                            ReadCount = 0,
                            SemesterId = 1,
                            Title = "Title1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(899),
                            Description = "Descript2",
                            EventDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(898),
                            ImgBackUrl = "Url2",
                            IsActive = true,
                            OurFormatId = 1,
                            ReadCount = 0,
                            SemesterId = 1,
                            Title = "Title2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(901),
                            Description = "Descript3",
                            EventDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(900),
                            ImgBackUrl = "Url3",
                            IsActive = true,
                            OurFormatId = 2,
                            ReadCount = 0,
                            SemesterId = 1,
                            Title = "Title3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(928),
                            Description = "Descript4",
                            EventDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(902),
                            ImgBackUrl = "Url4",
                            IsActive = true,
                            OurFormatId = 1,
                            ReadCount = 0,
                            SemesterId = 1,
                            Title = "Title4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(931),
                            Description = "Descript5",
                            EventDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(929),
                            ImgBackUrl = "Url5",
                            IsActive = true,
                            OurFormatId = 2,
                            ReadCount = 0,
                            SemesterId = 1,
                            Title = "Title5"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.EventParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AppUserId = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(643),
                            EventId = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = "2",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(648),
                            EventId = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(649),
                            EventId = 2,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.EventPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventPictures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(774),
                            EventId = 1,
                            ImgUrl = "Url1",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(778),
                            EventId = 2,
                            ImgUrl = "Url2",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(780),
                            EventId = 3,
                            ImgUrl = "Url3",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(781),
                            EventId = 4,
                            ImgUrl = "Url4",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(782),
                            EventId = 5,
                            ImgUrl = "Url5",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Campus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1028),
                            IsActive = true,
                            Name = "Ali Rıza Veziroğlu Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 2,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1029),
                            IsActive = true,
                            Name = "Asım Kocabıyık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 3,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1030),
                            IsActive = true,
                            Name = "Değirmendere Ali ÖZBAY Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 4,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1031),
                            IsActive = true,
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 5,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1032),
                            IsActive = true,
                            Name = "Denizcilik Fakültesi"
                        },
                        new
                        {
                            Id = 6,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1033),
                            IsActive = true,
                            Name = "Diş Hekimliği Fakültesi"
                        },
                        new
                        {
                            Id = 7,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1034),
                            IsActive = true,
                            Name = "Diş Hekimliği Fakültesi"
                        },
                        new
                        {
                            Id = 8,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1035),
                            IsActive = true,
                            Name = "Eğitim Fakültesi"
                        },
                        new
                        {
                            Id = 9,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1036),
                            IsActive = true,
                            Name = "Fen - Edebiyat Fakültesi"
                        },
                        new
                        {
                            Id = 10,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1037),
                            IsActive = true,
                            Name = "Ford Otosan İhsaniye Otomotiv Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 11,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1038),
                            IsActive = true,
                            Name = "Gazanfer Bilge Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 12,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1039),
                            IsActive = true,
                            Name = "Gıda ve Tarım Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 13,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1039),
                            IsActive = true,
                            Name = "Gölcük Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 14,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1040),
                            IsActive = true,
                            Name = "Güzel Sanatlar Fakültesi"
                        },
                        new
                        {
                            Id = 15,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1041),
                            IsActive = true,
                            Name = "Havacılık ve Uzay Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 16,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1042),
                            IsActive = true,
                            Name = "Hereke Asım Kocabıyık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 17,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1043),
                            IsActive = true,
                            Name = "Hereke Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 18,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1044),
                            IsActive = true,
                            Name = "Hereke Ömer İsmet Uzunyol Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 19,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1045),
                            IsActive = true,
                            Name = "Hukuk Fakültesi"
                        },
                        new
                        {
                            Id = 20,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1046),
                            IsActive = true,
                            Name = "İktisadi ve İdari Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 21,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1047),
                            IsActive = true,
                            Name = "İlahiyat Fakültesi"
                        },
                        new
                        {
                            Id = 22,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1048),
                            IsActive = true,
                            Name = "İletişim Fakültesi"
                        },
                        new
                        {
                            Id = 23,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1049),
                            IsActive = true,
                            Name = "İzmit Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 24,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1050),
                            IsActive = true,
                            Name = "Kandıra Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 25,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1051),
                            IsActive = true,
                            Name = "Karamürsel Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 26,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1051),
                            IsActive = true,
                            Name = "Kartepe Atçılık Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 27,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1052),
                            IsActive = true,
                            Name = "Kartepe Turizm Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 28,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1053),
                            IsActive = true,
                            Name = "Kocaeli Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 29,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1054),
                            IsActive = true,
                            Name = "Kocaeli Sağlık Hizmetleri Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 30,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1055),
                            IsActive = true,
                            Name = "Koseköy Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 31,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1056),
                            IsActive = true,
                            Name = "Mimarlık ve Tasarım Fakültesi"
                        },
                        new
                        {
                            Id = 32,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1057),
                            IsActive = true,
                            Name = "Mühendislik Fakültesi"
                        },
                        new
                        {
                            Id = 33,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1058),
                            IsActive = true,
                            Name = "Sağlık Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 34,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1059),
                            IsActive = true,
                            Name = "Spor Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 35,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1060),
                            IsActive = true,
                            Name = "Teknoloji Fakültesi"
                        },
                        new
                        {
                            Id = 36,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1061),
                            IsActive = true,
                            Name = "Tıp Fakültesi"
                        },
                        new
                        {
                            Id = 37,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1062),
                            IsActive = true,
                            Name = "Turizm Fakültesi"
                        },
                        new
                        {
                            Id = 38,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1063),
                            IsActive = true,
                            Name = "Turizm İşletmecliliği ve Otelcilik Yüksekokulu"
                        },
                        new
                        {
                            Id = 39,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1063),
                            IsActive = true,
                            Name = "Uzunçiftlik Nuh Çimento Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 40,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1064),
                            IsActive = true,
                            Name = "Yahya Kaptan Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 41,
                            Campus = "Kocaeli",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1065),
                            IsActive = true,
                            Name = "Ziraat Fakültesi"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppStatus")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ApplyTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introducing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SituationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Why")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TitleId");

                    b.ToTable("GeneralAssemblyApplies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppStatus = 0,
                            AppUserId = "1",
                            ApplyTime = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1169),
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1168),
                            Introducing = "Introducing",
                            IsActive = true,
                            SituationDescription = "SituationDescription",
                            TeamId = 1,
                            TitleId = 1,
                            Why = "why"
                        },
                        new
                        {
                            Id = 2,
                            AppStatus = 1,
                            AppUserId = "1",
                            ApplyTime = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1172),
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1171),
                            Introducing = "Introducing2",
                            IsActive = true,
                            SituationDescription = "SituationDescription2",
                            TeamId = 1,
                            TitleId = 2,
                            Why = "why2"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Email")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Sms")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1320),
                            Email = 1,
                            IsActive = true,
                            Sms = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1321),
                            Email = 1,
                            IsActive = true,
                            Sms = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1322),
                            Email = 0,
                            IsActive = true,
                            Sms = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1323),
                            Email = 0,
                            IsActive = true,
                            Sms = 0
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.OurFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OurFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1437),
                            Description = "Description1",
                            ImgUrl = "Url1",
                            IsActive = true,
                            Keywords = "Keywords1",
                            Name = "Format1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1441),
                            Description = "Description2",
                            ImgUrl = "Url2",
                            IsActive = true,
                            Keywords = "Keywords2",
                            Name = "Format2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1443),
                            Description = "Description3",
                            ImgUrl = "Url3",
                            IsActive = true,
                            Keywords = "Keywords3",
                            Name = "Format3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1445),
                            Description = "Description4",
                            ImgUrl = "Url4",
                            IsActive = true,
                            Keywords = "Keywords4",
                            Name = "Format4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1447),
                            Description = "Description5",
                            ImgUrl = "Url5",
                            IsActive = true,
                            Keywords = "Keywords5",
                            Name = "Format5"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Redirect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Redirects");
                });

            modelBuilder.Entity("KouArge.Core.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1563),
                            IsActive = true,
                            Name = "Semester1",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1565),
                            IsActive = true,
                            Name = "Semester2",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1566),
                            IsActive = true,
                            Name = "Semester3",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1567),
                            IsActive = true,
                            Name = "Semester4",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1568),
                            IsActive = true,
                            Name = "Semester5",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SocaialMediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocaialMediaTypeId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SocaialMediaTypes");
                });

            modelBuilder.Entity("KouArge.Core.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Speaker");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1692),
                            EventId = 2,
                            ImgUrl = "Spekare Url 1",
                            IsActive = true,
                            Name = "Speaker Name 1",
                            Url = "spekaer Url 1"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1697),
                            EventId = 2,
                            ImgUrl = "Spekare Url 11",
                            IsActive = true,
                            Name = "Speaker Name 11",
                            Url = "spekaer Url 11"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1700),
                            EventId = 1,
                            ImgUrl = "Spekare Url 2",
                            IsActive = true,
                            Name = "Speaker Name 2",
                            Url = "spekaer Url 2"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1703),
                            EventId = 1,
                            ImgUrl = "Spekare Url 21",
                            IsActive = true,
                            Name = "Speaker Name 21",
                            Url = "spekaer Url 21"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1705),
                            EventId = 2,
                            ImgUrl = "Spekare Url 3",
                            IsActive = true,
                            Name = "Speaker Name 3",
                            Url = "spekaer Url 3"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1708),
                            EventId = 2,
                            ImgUrl = "Spekare Url 31",
                            IsActive = true,
                            Name = "Speaker Name 31",
                            Url = "spekaer Url 31"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1732),
                            EventId = 1,
                            ImgUrl = "Spekare Url 4",
                            IsActive = true,
                            Name = "Speaker Name 4",
                            Url = "spekaer Url 4"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1734),
                            EventId = 1,
                            ImgUrl = "Spekare Url 41",
                            IsActive = true,
                            Name = "Speaker Name 41",
                            Url = "spekaer Url 41"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.SponsorsAndPartners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SponsorsAndPartners");
                });

            modelBuilder.Entity("KouArge.Core.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1937),
                            Description = "Webino Takımı",
                            ImgUrl = "logoUrl",
                            IsActive = true,
                            Name = "Webino"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1939),
                            Description = "Mobil Takımı",
                            ImgUrl = "logoUrl2",
                            IsActive = true,
                            Name = "Mobil"
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralAssemblyApplyId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GeneralAssemblyApplyId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TitleId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "1",
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1836),
                            EndDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1838),
                            GeneralAssemblyApplyId = 2,
                            ImgUrl = "ImageUrl",
                            IsActive = true,
                            StartDate = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(1837),
                            TeamId = 1,
                            TitleId = 1
                        });
                });

            modelBuilder.Entity("KouArge.Core.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(2035),
                            IsActive = true,
                            Name = "Takım Kaptanı"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(2036),
                            IsActive = true,
                            Name = "Takım Kaptan Yardımcısı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 27, 16, 16, 42, 302, DateTimeKind.Local).AddTicks(2037),
                            IsActive = true,
                            Name = "Takım Üyesi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.HasOne("KouArge.Core.Models.Department", "Department")
                        .WithMany("AppUsers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Notification", "Notification")
                        .WithMany("AppUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("KouArge.Core.Models.Certificate", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", "AppUser")
                        .WithMany("Certificates")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("Certificates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.HasOne("KouArge.Core.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.HasOne("KouArge.Core.Models.OurFormat", "OurFormat")
                        .WithMany("Event")
                        .HasForeignKey("OurFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Semester", "Semester")
                        .WithMany("Events")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OurFormat");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventParticipant", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", "AppUser")
                        .WithMany("EventParticipantLists")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.EventPicture", b =>
                {
                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("EventPictures")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", "AppUser")
                        .WithMany("GeneralAssemblyApplyies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Team", "Team")
                        .WithMany("GeneralAssemblyApplies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Title", "Title")
                        .WithMany("GeneralAssemblyApplies")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Team");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMedia", b =>
                {
                    b.HasOne("KouArge.Core.Models.SocialMediaType", "SocaialMediaType")
                        .WithMany("SocialMedias")
                        .HasForeignKey("SocaialMediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.TeamMember", "TeamMember")
                        .WithMany("SocialMedias")
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocaialMediaType");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("KouArge.Core.Models.Speaker", b =>
                {
                    b.HasOne("KouArge.Core.Models.Event", "Event")
                        .WithMany("Speakers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.TeamMember", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.GeneralAssemblyApply", "GeneralAssemblyApply")
                        .WithMany("TeamMembers")
                        .HasForeignKey("GeneralAssemblyApplyId")
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("GeneralAssemblyApply");

                    b.Navigation("Team");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KouArge.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KouArge.Core.Models.AppUser", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("EventParticipantLists");

                    b.Navigation("GeneralAssemblyApplyies");
                });

            modelBuilder.Entity("KouArge.Core.Models.Department", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("KouArge.Core.Models.Event", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("EventParticipants");

                    b.Navigation("EventPictures");

                    b.Navigation("Speakers");
                });

            modelBuilder.Entity("KouArge.Core.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("KouArge.Core.Models.GeneralAssemblyApply", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("KouArge.Core.Models.Notification", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("KouArge.Core.Models.OurFormat", b =>
                {
                    b.Navigation("Event");
                });

            modelBuilder.Entity("KouArge.Core.Models.Semester", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("KouArge.Core.Models.SocialMediaType", b =>
                {
                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("KouArge.Core.Models.Team", b =>
                {
                    b.Navigation("GeneralAssemblyApplies");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("KouArge.Core.Models.TeamMember", b =>
                {
                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("KouArge.Core.Models.Title", b =>
                {
                    b.Navigation("GeneralAssemblyApplies");
                });
#pragma warning restore 612, 618
        }
    }
}
